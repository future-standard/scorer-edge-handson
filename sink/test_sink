#!/usr/bin/env python3


# This script dumps various streams



import sys
import argparse
import zmq
import time
import cv2
import pickle
import numpy
import threading
import queue
import json




# Handle arguments

PROG_DESCRIPTION='''\
description:
  this program subscribes stream sources and dumps to stdout and imshow.
'''

PROG_EPILOG='''\

examples:
  %(prog)s
  %(prog)s --imshow
  %(prog)s --imshow --pretty-json -ib 'tcp://*:6789'
  %(prog)s -ic tcp://192.168.10.11:9877 tcp://192.168.10.12:9877
  %(prog)s -ib ipc://@/scorer/video-sink --subscribe test0
'''

DEFAULT_INGRESS_ADDR="tcp://localhost:6789"
DEFAULT_INGRESS_TOPICS=[ 'VideoFrame', 'JpegFrame', 'LogFrame' ]

DEFAULT_STATS_INTERVAL=0.0



ap = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=PROG_DESCRIPTION,
        epilog=PROG_EPILOG)

ap.add_argument('-v','--verbose', action='count', default=0, help='increase verbosity')

apg1 = ap.add_argument_group()
apmx1 = apg1.add_mutually_exclusive_group()
apmx1.add_argument('-ic', dest='ingress_connects', metavar='ADDR', nargs='+', action='append',
                   help='specify a ZMQ endpoint to connect to a data source (default:{})'
                       .format(DEFAULT_INGRESS_ADDR))
apmx1.add_argument('-ib', dest='ingress_binds', metavar='ADDR', nargs='+', action='append',
                   help='specify a ZMQ endpoint to bind for data sources')

apg2 = ap.add_argument_group()
apg2.add_argument('--subscribe', dest='topics', metavar='TOPIC', nargs='+', action='append',
                  help='specify the subscription topic of data sources (default:{})'
                       .format(DEFAULT_INGRESS_TOPICS))

apg3 = ap.add_argument_group()
apg3.add_argument('--measure-fps', dest='stats_interval', metavar='SEC', type=float,
                  default=DEFAULT_STATS_INTERVAL,
                  help='measure and dump the framerate for the interval')
apg3.add_argument('--pretty-json', action='store_true',
                  help='dump the json with sorted keys and indent')
apg3.add_argument('--imshow', action='store_true',
                  help='monitor the captured video')
apg3.add_argument('-q', '--quiet', action='store_true',
                  help='suppress the log output to stdout')

args = ap.parse_args()


# Sanity checks
if args.stats_interval < 0.0:
    ap.error(message="the fps interval must not be negative")

# Flatten the lists
if args.ingress_binds:
    args.ingress_binds = sum(args.ingress_binds, [])
    args.ingress_binds = [s for s in args.ingress_binds if s]
if args.ingress_connects:
    args.ingress_connects = sum(args.ingress_connects, [])
    args.ingress_connects = [s for s in args.ingress_connects if s]
if args.topics:
    args.topics = sum(args.topics, [])
    args.topics = [s for s in args.topics if s]

# Set the default endpoint
if not args.ingress_connects and not args.ingress_binds:
    args.ingress_connects = [ DEFAULT_INGRESS_ADDR ]

# Set the default topic filter
if not args.topics:
    args.topics = DEFAULT_INGRESS_TOPICS

# Set the option for json.dumps
if args.pretty_json:
    json_opts = {'sort_keys': True, 'indent': 2}
else:
    json_opts = {'sort_keys': True}







# --------------------------------
# ZeroMQ
# --------------------------------
ctx = zmq.Context()



# --------------------------------
# Utility Functions and Constants
# --------------------------------

TOPIC_VIDEO_FRAME = b'VideoFrame'
TOPIC_JPEG_FRAME = b'JpegFrame'
TOPIC_LOG_FRAME = b'LogFrame'

MAX_QUEUE_LEN = 300


def dprint(level_, *args_, **kwargs_):
    if level_ <= 0:
        print('Log level must be positive: {}'.format(level_))
        sys.exit(1)

    # args.verbose:
    #    0: Suppress all debug logging
    #    1: Show significant logs only
    #    2: Show important logs
    #    3: Show detailed logs
    #    4: Show trace logs
    if args.verbose >= level_:
        print(*args_, **kwargs_)




# Queue between the main thread and the stream subscriber
imgq = queue.Queue(MAX_QUEUE_LEN)





# --------------------------------
# Stream Subscriber
# --------------------------------
POLL_WAIT_TIME=300      # milliseconds



stopped = False

def subscribe_streams(imgq_):

    # Setup the ingress socket for streams
    socki = ctx.socket(zmq.SUB)
    socki.setsockopt(zmq.RCVHWM, 100)

    if type(args.topics) == list:
        for topic in args.topics:
            print('Ingress: Setting a topic filter "{}"'.format(topic))
            socki.setsockopt_string(zmq.SUBSCRIBE, topic)

    if type(args.ingress_binds) == list:
        for addr in args.ingress_binds:
            print('Ingress: Binding to "{}"'.format(addr))
            socki.bind(addr)

    elif type(args.ingress_connects) == list:
        for addr in args.ingress_connects:
            print('Ingress: Connecting to "{}"'.format(addr))
            socki.connect(addr)

    poller = zmq.Poller()
    poller.register(socki, zmq.POLLIN)

    # Stats of the collected streams
    received = 0
    dropped = 0
    delayed = 0.0

    last_stats_dumped = now = time.time()

    while not stopped:

        # Show the stats
        if 0.0 < args.stats_interval and last_stats_dumped + args.stats_interval < now:
            duration = now - last_stats_dumped
            delayed_ave = (delayed / received) if received > 0 else 0.0
            in_fps = (received - dropped) / duration

            if args.stats_interval >= 0.0:
                print('{} received {} dropped | interval {:.3f}s | fps {:.3f} in | delay {:.6f}'
                      .format(received, dropped, duration, in_fps, delayed_ave), flush=True)

            received = 0
            dropped = 0
            delayed = 0.0
            last_stats_dumped = now


        events = dict(poller.poll(POLL_WAIT_TIME))
        now = time.time()

        if events.get(socki) != zmq.POLLIN:
            continue    # Poller time out


        # Receive a message
        msg = socki.recv_multipart(flags=zmq.NOBLOCK)
        if not msg:
            continue
        received += 1

        # Decode the message
        try:
            topic       = msg[0]  # bytes
            source_id   = msg[1]  # bytes
            frame_time  = pickle.loads(msg[2])

            dprint(4,'Received: topic {} source_id {} ftime {:.3f}'
                     .format(topic, source_id, frame_time), flush=True)

            if topic.endswith(b'/' + source_id):
                # Separate out the source ID from the topic
                topic = topic[:-(len(source_id)+1)]

            if topic == TOPIC_VIDEO_FRAME or topic == TOPIC_JPEG_FRAME:
                meta        = pickle.loads(msg[3])
                img         = numpy.frombuffer(memoryview(msg[4]), dtype=meta['dtype'])
                img         = img.reshape(meta['shape'])
                annotation  = pickle.loads(msg[5])


                if topic == TOPIC_JPEG_FRAME:
                    img = cv2.imdecode(img, cv2.IMREAD_COLOR)

                item        = (img, annotation)

            elif topic == TOPIC_LOG_FRAME:
                item        = (numpy.array([]), pickle.loads(msg[3]))

            else:
                dprint(4,'Ignoring a message by topic: {} (len {})'
                          .format(topic, len(msg)))
                dropped += 1
                continue

        except pickle.UnpicklingError as e:
            print('Corrupted pickle message: topic {}, source {}, {}'
                  .format(topic, source_id, e))
            dropped += 1
            continue
        except IndexError as e:
            print('Invalid length: topic {}, source {}, length {}, {}'
                  .format(topic, source_id, len(msg)))
            dropped += 1
            continue
        except ValueError as e:
            print('Invalid value: topic {}, source {}, {}'
                  .format(topic, source_id, e))
            dropped += 1
            continue


        # Accumulate the delay
        delayed += (now - frame_time)

        # Dump the message
        if item[0].size > 0:
            if args.imshow:
                img = numpy.copy(item[0])
                imgq_.put((source_id, img), block=False)

        if not args.quiet:
            item[1]['source_id'] = source_id.decode()
            item[1]['frame_time'] = frame_time
            print('{}'.format(json.dumps(item[1], **json_opts)), flush=True)

    # Clean up for this thread
    socki.setsockopt(zmq.LINGER, 0)
    socki.close()

    dprint(4,'Exiting the stream subscriber.')


print('Starting the stream subscriber thread now ...\n')
stream_subscriber = threading.Thread(target=subscribe_streams, args=[imgq])
stream_subscriber.start()




# --------------------------------
# Main thread for OpenCV imshow
# --------------------------------
WAIT_TIME=30            # milliseconds (determine the maximum FPS to imshow)


# The main thread handles window events


try:    # for KeyboardInterrupt

    win = False

    while True:

        # Extract the latest images received during cv2.waitKey
        latest_images = {}
        try:
            while True:
                source_id, img = imgq.get(block=False)
                latest_images[source_id] = img
        except queue.Empty:
            pass

        if not latest_images and not win:
            time.sleep(WAIT_TIME / 1000)
            continue

        win = True

        # Draw the latest images
        for source_id, img in latest_images.items():
            h,w,*_ = img.shape
            win_title="{}: {}x{}".format(source_id, w, h)
            cv2.imshow(win_title, img)

        # Handle the window events
        key = cv2.waitKey(WAIT_TIME)
        if key == 27:
            break

        # FIXME:
        # If all windows are closed by the user, win is still True but
        # cv2.waitKey() returns immediately, falling into a busy loop

except KeyboardInterrupt:
    print("\nKeyboardInterrupt\n", file=sys.stderr, flush=True)


# Clean up
dprint(1,'Waiting the stream_subscriber to join ...')
stopped = True
stream_subscriber.join()

ctx.term()

# EOF
